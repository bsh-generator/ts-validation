import { ErrorMessage } from "./index";

export const fr: ErrorMessage = {
  noMessage: "No Error Message Was Provided!",
  string: {
    required: "Ce champ est requis !",
    notEmpty: "Ce champ ne peut pas être vide !",
    min: "La longueur minimale requise est de %1",
    max: "La longueur maximale autorisée est de %1",
    includes: "Doit inclure \"%1\"",
    includesAll: "Doit inclure tous : %1",
    startsWith: "Doit commencer par \"%1\"",
    endsWith: "Doit se terminer par \"%1\"",
    matches: "Ne correspond pas au modèle requis",
    email: "Format d'email invalide",
    phone: "Format de téléphone invalide",
    url: "Format d'URL invalide",
    date: "Format de date invalide",
    time: "Format d'heure invalide",
    hexColor: "Format de couleur hexadécimale invalide",
    creditCard: "Format de numéro de carte de crédit invalide",
    htmlTag: "Format de balise HTML invalide",
    base64: "Format Base64 invalide",
    alphanumeric: "Doit contenir uniquement des caractères alphanumériques",
    numeric: "Doit contenir uniquement des caractères numériques",
    alpha: "Doit contenir uniquement des caractères alphabétiques",
    as: "La valeur doit être comme '%1'",
  },
  number: {
    required: "Ce champ est requis !",
    min: "La valeur doit être supérieure ou égale à %1",
    max: "La valeur doit être inférieure ou égale à %1",
    range: "La valeur doit être comprise entre %1 et %2",
    integer: "La valeur doit être un nombre entier",
    positive: "La valeur doit être positive",
    negative: "La valeur doit être négative",
    decimal: "La valeur doit être un nombre décimal",
    multipleOf: "La valeur doit être un multiple de %1",
    betweenExclusive: "La valeur doit être comprise entre %1 (exclusif) et %2 (exclusif)",
    even: "La valeur doit être un nombre pair",
    odd: "La valeur doit être un nombre impair",
    positiveInteger: "La valeur doit être un entier positif",
    negativeInteger: "La valeur doit être un entier négatif",
    positiveDecimal: "La valeur doit être un nombre décimal positif",
    negativeDecimal: "La valeur doit être un nombre décimal négatif",
    divisibleBy: "La valeur doit être divisible par %1",
    perfectSquare: "La valeur doit être un carré parfait",
    primeNumber: "La valeur doit être un nombre premier",
    fibonacciNumber: "La valeur doit être un nombre de Fibonacci",
    powerOfTwo: "La valeur doit être une puissance de deux",
    as: "La valeur doit être comme '%1'",
  },
  boolean: {
    required: "Ce champ est requis !",
    true: "La valeur doit être vrai",
    false: "La valeur doit être faux",
    equals: "La valeur doit être égale à %1",
    as: "La valeur doit être comme '%1'",
  },
  array: {
    length: "La valeur doit avoir une longueur de %1",
    min: "La longueur minimale requise est de %1",
    max: "La longueur maximale autorisée est de %1",
    has: "La valeur doit inclure %1",
    hasAll: "La valeur doit inclure tous : %1",
    hasAny: "La valeur doit inclure n'importe lequel de : %1",
    hasNone: "La valeur ne doit inclure aucun de : %1",
    some: "Le tableau ne correspond pas au prédicat donné",
    every: "Le tableau ne correspond pas au prédicat donné",
  },
  datetime: {
    required: "Ce champ est requis !",
    equals: "La valeur doit être %1",
    after: "La date et l'heure doivent être postérieures à %1",
    before: "La date et l'heure doivent être antérieures à %1",
    between: "La date et l'heure doivent être comprises entre %1 et %2",
    todayOrAfter: "La date et l'heure doivent être aujourd'hui ou postérieures à aujourd'hui",
    todayOrBefore: "La date et l'heure doivent être aujourd'hui ou antérieures à aujourd'hui",
    past: "La date et l'heure doivent être dans le passé",
    future: "La date et l'heure doivent être dans le futur",
    weekday: "La date et l'heure doivent être un jour de semaine",
    weekend: "La date et l'heure doivent être un jour de week-end",
    as: "La valeur doit être comme '%1'",
  },
  date: {
    required: "Ce champ est requis !",
    equals: "La valeur doit être %1",
    after: "La date doit être postérieure à %1",
    before: "La date doit être antérieure à %1",
    between: "La date doit être comprise entre %1 et %2",
    todayOrAfter: "La date doit être aujourd'hui ou postérieure à aujourd'hui",
    todayOrBefore: "La date doit être aujourd'hui ou antérieure à aujourd'hui",
    past: "La date doit être dans le passé",
    future: "La date doit être dans le futur",
    weekday: "La date doit être un jour de semaine",
    weekend: "La date doit être un jour de week-end",
    leapYear: "La date doit être dans une année bissextile",
    sameDayAs: "La date doit être le même jour que %1",
    as: "La valeur doit être comme '%1'",
  },
  time: {
    required: "Ce champ est requis !",
    equals: "La valeur doit être %1",
    after: "L'heure doit être postérieure à %1",
    before: "L'heure doit être antérieure à %1",
    between: "L'heure doit être comprise entre %1 et %2",
    nowOrAfter: "L'heure doit être maintenant ou postérieure à maintenant",
    nowOrBefore: "L'heure doit être maintenant ou antérieure à maintenant",
    past: "L'heure doit être dans le passé",
    future: "L'heure doit être dans le futur",
    within24Hours: "L'heure doit être dans les 24 prochaines heures",
    as: "La valeur doit être comme '%1'",
  },
};
